extern "C" {
    typedef unsigned long long u64;
    typedef unsigned int u32;

    __global__ void test_kernel(
        u64* result_array, u32* result_count, 
        u32* shared_mem_contents, u32 shared_mem_contents_length, 
        u64 offset)
    {
        extern __shared__ u32 loot_data[];
        for (int i = threadIdx.x; i < shared_mem_contents_length; i += blockDim.x) {
            loot_data[i] = shared_mem_contents[i];
        }
        __syncthreads();

        const u64 tid = blockIdx.x * blockDim.x + threadIdx.x + offset;
        if (tid & 0x01000000ULL) {
            u32 ix = atomicAdd(result_count, 1);
            result_array[ix] = shared_mem_contents_length;
        }
    }
}
